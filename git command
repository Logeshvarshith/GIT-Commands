git clone -b Logeshvarshit-patch-1 https://github.com/Logeshvarshith/training.git
syntax:git clone -b {branch name} {url}


git init--->used to create empty local repo
git add <file name>-->add files from working directory to stage area(index area or cache area)
git commit -m "commit message"-->commit the files
git status (or) git status -s-->view the status
git log-->commit log


git config:
git config --global user.name "username"
git config --list-->listout all git config
change user name and email:
git config user.name "tru"
git config user.email "mail@gmail.com"

ls-->view the files in pariticular folder
ls -a-->view the hidden files in a particular area

Modification file direct comit:
git commit -a -m "commit message"

git files-->view the git files


File creation:
cat > filename.txt
file content added
Modification(append) file:
cat >> filename.txt (or) echo "hyioo">>filename.txt
file content added.

used to create project path
mkdir name

git add .
git add *
git add -A
git *.java

git ls-files--->it is used to view the tracking files by git.


git log:
1)git log --oneline(commit id+commit msg)
2)git log -n 2 --oneline(only show first two commits)
3)git log -3(only show first three commits)
4)--since="2010-09-08"(specific date and time)



git diff:
1)git diff filename name--->d/b working and staging area commits
2)git diff HEAD file1.txt (working directory vs local repo)
3)git diff --staged HEAD filename(staged and local repo)
4)git diff (7characters) filename(working directory vs specific commits)
5)git diff --staged (7characters) (working directory vs specific commits)
6)git diff (1commit 7characters)(2nd comit 7characters) filename(two commit difference check)
7)git diff HEAD HEAD(~ or ^)1 filename(last commit and previos commit)




git remove:
Note:git rm (or) git rm .-->Invalid command
All files removed command git rm -r .
1)git rm filename(both working directory and stage area)
2)git rm --cached filename (only for statging area)
3)rm filename(only for working directory)



git checkout:(undo operation in wD)--->todiscard unstaged changes in working directory of tracked files.
1)git checkout(find the checkot files)
2)git checkout --filename (or) git checkout filename


git references:
git provides some sample names for these commit ids.Wecan use these names directly instead of commit ids.These arejust pointers to commit ids.
symbolic references-->if any reference pointing to another reference
Detached Head-->sometime head not pointing to the master


git show master
git show HEAD 
git show HEAD~1


git reset:
case 1:To discard changes in sa
git reset filename --->only changes can be revertd.

case 2:To undo commits at repo level
git reset <mode> <commitid> Mode will decide whether these changes are going to remove from staging area or not from working directly or not.
Note:undo random commit is not possible.

The allowed values for the mode are:
--mixed -->It is a default mode.(remove commits from repo and staging area)
--soft -->Exactly same as mixed but remove commits from only repo
--hard-->Exactly same as mixed but commit deleted everywhere.
1)git reset --mixed <commit-id>


git Aliasing:
Alias-->alternative name or nick name(.gitconfig store the value) 
By using "git config"
Syntax:$ git config --global alias.aliasname "Actual command(remove git)"
$ git config --global alias.one "log --oneline"

git ignore:
touch .x .y(.*)
touch a.txt b.txt c.txt (*.txt)
logs(logs/)
mkdir logs
touch logs/server.logs logs/server
-->cat .gitignore
#Ignore a.txt file
a.txt

Git Branching:(An indepedent flow of development)
Generally main source code we will placeanch in master branch.
Multiple flows-->parallel development ,code base was very clean.

conclusions:
1)once we create a branch all files and commits will be inherited from parent to chile branch.
2)All branches are isolated to each other.changes not visible to the other changes.

Find the branch:
git branch
* master-->* indicates currently active branch

To create a new branch:
git branch branch_name
git checkout -b branch_name(shortcut for creating branch name and switch branch name)

Switch one branch to another branch:
git checkout branch_name

Is git create a new directory?
Is git copy all the files ent to child from parent?
Ans:It is logical duplication of files.

HEAD-->always pointing to current active branch.
heads-->contains all branch information.

Merging of a branch:
1)first change head point as master
/d/gitprojects/project3 (master)
$ git merge feature

Types of merging:
1)Fast forward merge-->After creating child branch,if we are not doing any changes in the parent branch,git will proform Fast-forward merge.
2)Three way merge-->After creating child branch some commit performed in parent branch at the time three way merge performed by git.(Both parent and child branches updated)


Deleting a branch:
git branch -d <branch_name>

delete a line in vi editor:
syntax:dd

Git rebase:[alternative way to merge]
1.change Non-Linear graph to linear graph
2.New commits should not be created like merge-commit
3.we should not have any conflicts.

Rebase-->Re+base-->Re arrange base

Steps-1:Rebase feature branch on top of master branch
git checkout feature
git rebase master

step 2:
git checkout master
git merge feature

Git Stash:
stash:store safely in a hidden place.
Git stash:we have to save uncommitted changes from working directory and staging area to some temporary location.
syntax:git stash

limitations:
git stash is applicable for only tracked file.atleast one commit should be there.

How many stashes are there?
git stash list

view the file:
git show stash id


Git Unstash:
2ways:
1.git stash pop stash id--->the corresponding stash entry will be deleted.
2.git stash apply stash id-->the corresponding stash entry won't be deleted.
